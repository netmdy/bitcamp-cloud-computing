<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
<!-- xsi:schemaLocation="네임스페이스명 url -->
        
<context:component-scan base-package="bitcamp.test">
    <context:exclude-filter type="regex" expression="bitcamp.test.controller.*"/>
</context:component-scan>

<!-- 트랜잭션 관련 애노테이션을 처리할 객체들을 등록한다 -->
<tx:annotation-driven transaction-manager="txManager"/>

<!-- 애노테이션이 아닌 aop를 이용하여 트랜잭션을 관리 할 수 있다. -->    
<!-- 메서드 별로 어떻게 트랜잭션을 적용할 지 설정한다 -->
<tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
        <tx:method name="get*" read-only="true"/>
        <tx:method name="list*" read-only="true"/>
        <tx:method name="*"/>
    </tx:attributes>
</tx:advice>

<!-- 트랜잭션을 적용할 대상을 설정하기 -->
<aop:config>
    <!-- 트랜잭션을 적용할 대상의 규칙을 선언 하기 -->
    <aop:pointcut id="serviceOperation" expression="execution(* bitcamp.test.service.*.*(..))"/>
    <!-- 대상에 대해 어떤 트랜잭션을 적용할 지 설정하기 -->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation"/>
</aop:config>


<bean id="sqlSessionFactory"
      class="org.mybatis.spring.SqlSessionFactoryBean">

    <property name="dataSource" ref="dataSource" />
    <property name="mapperLocations" value="classpath*:bitcamp/test/sql/**/*.xml"></property>
    <property name="typeAliasesPackage" value="bitcamp.test.domain"></property>
   
</bean>

<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driver}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
</bean>

<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
</bean>

<!-- dao 인터페이스로 부터 구현체를 자동 생성하는 객체 등록 
    dao 구현체가 사용한 sql mapper 파일은 namespace 값으로 찾음
    따라서 인터페이스 명과 sql mapper의 namespace 값은 같아야 함
    또한 인터페이스의 메서드명과 sql id는 같아야 함-->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
  <property name="basePackage" value="bitcamp.test.dao" />
</bean>

<!-- .properties 파일을 읽어서 그 데이터를 보관할 객체를 등록 -->
<context:property-placeholder location="classpath:bitcamp/test/config/jdbc.properties"/>

</beans>